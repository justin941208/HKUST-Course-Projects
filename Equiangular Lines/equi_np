#!/usr/bin/env sage
from __future__ import print_function
from __future__ import division
from sage.all import *

import numpy as np
from time import time
import multiprocessing as mp
from itertools import imap

K = 6
N_JOBS = 1
Angle = 1 / 3
Bound = 16

class Grow(object):
    def __init__(self, k, a, b):
        self.k = k
        self.angle = a
        self.bound = b
        self.threshold = self.bound - self.k
        self.base_mat = np.zeros((self.k, self.k), np.float64)
        self.base_mat[1:,0] = -a
        self.base_mat[0,1:] = -a
        vals_list = [[-a, a]] * self.k
        self.b = np.array(np.meshgrid(*vals_list)).T.reshape(-1, self.k)

    def __call__(self, g):
        mat = self.base_mat
        mat[1:, 1:] = np.array(g.seidel_adjacency_matrix(), np.float64) * self.angle
        mat += np.identity(mat.shape[0])
        evals, evecs = np.linalg.eigh(mat)
        if np.all(evals > 0):
            x = np.dot(evecs, np.diag(np.sqrt(evals)))
            sol = np.linalg.solve([x], self.b)
            y = sol[np.isclose(np.linalg.norm(sol, 2, axis=1), 1)]
            if y.shape[0] >= self.threshold:
                yty = np.dot(y, y.T)
                g_dict = {}
                for i in range(1, yty.shape[0]):
                    g_dict[i] = []
                    for j in range(i):
                        if np.any(np.isclose(yty[i,j], [self.angle, -self.angle])):
                            g_dict[i].append(j)
                G = Graph(g_dict)
                if G.clique_number >= self.threshold:
                    x_list = []
                    cs = G.cliques_maximum()
                    for c in cs:
                        x_list.append(np.concatenate([x, y[c]], axis=0))
                    return x_list
                else:
                    return []
            else:
                return []
        else:
            return []

def Lines(k, a, b, n_jobs=None, chunk_size=200):
    grow = Grow(k, a, b)
    count = 0
    ls = []

    if n_jobs == 1:
        out_queue = imap(grow, graphs(k-1))
    else:
        pool = mp.Pool(processes=n_jobs)
        out_queue = pool.imap_unordered(grow, graphs(k-1), chunksize=chunk_size)

    start = time()
    for i,j in enumerate(out_queue):
        ls += j
        print('\r{} matrices calculated'.format(i), end='')

    if n_jobs != 1:
        pool.close()
        pool.join()
    end = time()
    print('\nTime elapsed: {:.2f} seconds'.format(end - start))
    return ls

def CheckEquivalence(l):
    evals = np.sort(np.linalg.eigvalsh(np.dot(l, l.T)))
    return evals

if __name__ == '__main__':
    lines = Lines(K, Angle, Bound, N_JOBS)
    for l in lines:
        print(CheckEquivalence(l))
    #ls = [y.shape[0] for y in ys]
    #print(ls)
